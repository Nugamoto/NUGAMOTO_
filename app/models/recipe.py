"""Recipe-related database models and schemas v2.0."""

from __future__ import annotations

import datetime
from typing import TYPE_CHECKING

from sqlalchemy import (
    String, Float, Integer, Boolean, DateTime, Text,
    ForeignKey, UniqueConstraint, CheckConstraint
)
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.db.base import Base

if TYPE_CHECKING:
    from app.models.user import User
    from app.models.food import FoodItem
    from app.models.core import Unit


# ================================================================== #
# Recipe Model                                                       #
# ================================================================== #

class Recipe(Base):
    """Represents a row in the ``recipes`` table.

    Recipes contain a title, cooking instructions, ingredients,
    and optional nutrition information. They can be created manually
    by users or generated by AI systems.
    """

    __tablename__ = "recipes"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    title: Mapped[str] = mapped_column(
        String(255),
        nullable=False,
        index=True,
        comment="Recipe title (e.g., 'Pasta Bolognese')"
    )
    is_ai_generated: Mapped[bool] = mapped_column(
        Boolean,
        nullable=False,
        default=False,
        comment="True if recipe was generated by AI"
    )
    created_by_user_id: Mapped[int | None] = mapped_column(
        ForeignKey("users.id"),
        nullable=True,
        index=True,
        comment="User who created this recipe (null for AI-generated)"
    )
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime,
        nullable=False,
        default=lambda: datetime.datetime.now(datetime.timezone.utc)
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    created_by_user: Mapped[User | None] = relationship(
        "User",
        back_populates="created_recipes"
    )
    ingredients: Mapped[list[RecipeIngredient]] = relationship(
        "RecipeIngredient",
        back_populates="recipe",
        cascade="all, delete-orphan",
        order_by="RecipeIngredient.food_item_id"
    )
    steps: Mapped[list[RecipeStep]] = relationship(
        "RecipeStep",
        back_populates="recipe",
        cascade="all, delete-orphan",
        order_by="RecipeStep.step_number"
    )
    nutrition: Mapped[RecipeNutrition | None] = relationship(
        "RecipeNutrition",
        back_populates="recipe",
        cascade="all, delete-orphan",
        uselist=False
    )
    reviews: Mapped[list[RecipeReview]] = relationship(
        "RecipeReview",
        back_populates="recipe",
        cascade="all, delete-orphan"
    )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"Recipe(id={self.id!r}, title={self.title!r}, "
            f"is_ai_generated={self.is_ai_generated!r})"
        )


# ================================================================== #
# Recipe Ingredient Model                                            #
# ================================================================== #

class RecipeIngredient(Base):
    """Represents a row in the ``recipe_ingredients`` table.

    Recipe ingredients store both the amount in the food item's base unit
    (for calculations and inventory tracking) and the original unit/amount
    as entered by the user (for display purposes).

    Example:
        - User enters: "1 cup flour"
        - Base unit (grams): 120.0
        - Original: 1.0 cup
        - Storage: amount_in_base_unit=120.0, original_amount=1.0, original_unit_id=cup_id
    """

    __tablename__ = "recipe_ingredients"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id"),
        primary_key=True,
        comment="Reference to the recipe"
    )
    food_item_id: Mapped[int] = mapped_column(
        ForeignKey("food_items.id"),
        primary_key=True,
        comment="Reference to the food item"
    )

    # Required: Always store the amount in the food item's base unit
    amount_in_base_unit: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        comment="Amount in the food item's base unit (e.g., grams, ml)"
    )

    # Optional: Store original format for display
    original_unit_id: Mapped[int | None] = mapped_column(
        ForeignKey("units.id"),
        nullable=True,
        comment="Original unit as entered by user (for display)"
    )
    original_amount: Mapped[float | None] = mapped_column(
        Float,
        nullable=True,
        comment="Original amount as entered by user (for display)"
    )

    # Timestamps
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime,
        nullable=False,
        default=lambda: datetime.datetime.now(datetime.timezone.utc)
    )
    updated_at: Mapped[datetime.datetime | None] = mapped_column(
        DateTime,
        nullable=True,
        onupdate=lambda: datetime.datetime.now(datetime.timezone.utc)
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    recipe: Mapped[Recipe] = relationship(
        "Recipe",
        back_populates="ingredients"
    )
    food_item: Mapped[FoodItem] = relationship("FoodItem")
    original_unit: Mapped[Unit | None] = relationship("Unit")

    # ------------------------------------------------------------------ #
    # Methods                                                             #
    # ------------------------------------------------------------------ #
    def display_amount(self) -> tuple[float, str]:
        """Get the amount and unit for display.

        Returns:
            Tuple of (amount, unit_name) for UI display.
            Falls back to base unit if original format is not available.
        """
        if self.original_amount is not None and self.original_unit is not None:
            return self.original_amount, self.original_unit.name
        else:
            # Fallback to base unit
            return self.amount_in_base_unit, self.food_item.base_unit.name

    def has_original_format(self) -> bool:
        """Check if original format information is available.

        Returns:
            True if both original_amount and original_unit_id are set.
        """
        return (
                self.original_amount is not None and
                self.original_unit_id is not None
        )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeIngredient(recipe_id={self.recipe_id!r}, "
            f"food_item_id={self.food_item_id!r}, "
            f"amount_in_base_unit={self.amount_in_base_unit!r})"
        )


# ================================================================== #
# Recipe Step Model                                                  #
# ================================================================== #

class RecipeStep(Base):
    """Represents a row in the ``recipe_steps`` table.

    Recipe steps contain numbered cooking instructions for a recipe.
    Steps are ordered by step_number and should form a complete
    cooking procedure when followed in sequence.
    """

    __tablename__ = "recipe_steps"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id"),
        nullable=False,
        index=True,
        comment="Reference to the recipe"
    )
    step_number: Mapped[int] = mapped_column(
        Integer,
        nullable=False,
        comment="Step number in the cooking sequence"
    )
    instruction: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="Cooking instruction for this step"
    )
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime,
        nullable=False,
        default=lambda: datetime.datetime.now(datetime.timezone.utc)
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    recipe: Mapped[Recipe] = relationship(
        "Recipe",
        back_populates="steps"
    )

    # ------------------------------------------------------------------ #
    # Constraints                                                         #
    # ------------------------------------------------------------------ #
    __table_args__ = (
        UniqueConstraint("recipe_id", "step_number", name="uq_recipe_step"),
        CheckConstraint("step_number > 0", name="ck_step_number_positive"),
        CheckConstraint("length(instruction) >= 5", name="ck_instruction_min_length"),
    )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        instruction_preview = (
            self.instruction[:50] + "..." if len(self.instruction) > 50
            else self.instruction
        )
        return (
            f"RecipeStep(id={self.id!r}, recipe_id={self.recipe_id!r}, "
            f"step_number={self.step_number!r}, instruction={instruction_preview!r})"
        )


# ================================================================== #
# Recipe Nutrition Model                                             #
# ================================================================== #

class RecipeNutrition(Base):
    """Represents a row in the ``recipe_nutrition`` table.

    Stores nutrition information for recipes, including macronutrients
    and the source of the nutrition data (manual entry, calculation, or AI).
    """

    __tablename__ = "recipe_nutrition"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id"),
        primary_key=True,
        comment="Reference to the recipe"
    )
    kcal: Mapped[float | None] = mapped_column(
        Float,
        nullable=True,
        comment="Calories per serving"
    )
    protein_g: Mapped[float | None] = mapped_column(
        Float,
        nullable=True,
        comment="Protein in grams per serving"
    )
    fat_g: Mapped[float | None] = mapped_column(
        Float,
        nullable=True,
        comment="Fat in grams per serving"
    )
    carbs_g: Mapped[float | None] = mapped_column(
        Float,
        nullable=True,
        comment="Carbohydrates in grams per serving"
    )
    fiber_g: Mapped[float | None] = mapped_column(
        Float,
        nullable=True,
        comment="Fiber in grams per serving"
    )
    source: Mapped[str | None] = mapped_column(
        String(50),
        nullable=True,
        comment="Source of nutrition data (manual, calculated, ai)"
    )
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime,
        nullable=False,
        default=lambda: datetime.datetime.now(datetime.timezone.utc)
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    recipe: Mapped[Recipe] = relationship(
        "Recipe",
        back_populates="nutrition"
    )

    # ------------------------------------------------------------------ #
    # Methods                                                             #
    # ------------------------------------------------------------------ #
    def has_complete_macros(self) -> bool:
        """Check if all macronutrient data is available.

        Returns:
            True if protein_g, fat_g, and carbs_g are all not None.
        """
        return all([
            self.protein_g is not None,
            self.fat_g is not None,
            self.carbs_g is not None
        ])

    def calculated_kcal(self) -> float | None:
        """Calculate calories from macronutrients if available.

        Uses the standard conversion:
        - Protein: 4 kcal/g
        - Fat: 9 kcal/g
        - Carbs: 4 kcal/g

        Returns:
            Calculated calories or None if macronutrient data is incomplete.
        """
        if not self.has_complete_macros():
            return None

        return (
                (self.protein_g * 4) +
                (self.fat_g * 9) +
                (self.carbs_g * 4)
        )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeNutrition(recipe_id={self.recipe_id!r}, "
            f"kcal={self.kcal!r}, source={self.source!r})"
        )


# ================================================================== #
# Recipe Review Model                                                #
# ================================================================== #

class RecipeReview(Base):
    """Represents a row in the ``recipe_reviews`` table.

    Users can rate and review recipes. Each user can only have one
    review per recipe (enforced by composite primary key).
    """

    __tablename__ = "recipe_reviews"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    user_id: Mapped[int] = mapped_column(
        ForeignKey("users.id"),
        primary_key=True,
        comment="User who wrote the review"
    )
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id"),
        primary_key=True,
        comment="Recipe being reviewed"
    )

    # Review content
    rating: Mapped[int] = mapped_column(
        Integer,
        nullable=False,
        comment="Rating from 1 to 5 stars"
    )
    comment: Mapped[str | None] = mapped_column(
        Text,
        nullable=True,
        comment="Optional review text"
    )
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime,
        nullable=False,
        default=lambda: datetime.datetime.now(datetime.timezone.utc)
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    user: Mapped[User] = relationship("User")
    recipe: Mapped[Recipe] = relationship(
        "Recipe",
        back_populates="reviews"
    )

    # ------------------------------------------------------------------ #
    # Constraints                                                         #
    # ------------------------------------------------------------------ #
    __table_args__ = (
        CheckConstraint("rating >= 1 AND rating <= 5", name="ck_rating_range"),
        CheckConstraint("comment IS NULL OR length(comment) >= 10", name="ck_comment_min_length"),
    )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeReview(user_id={self.user_id!r}, recipe_id={self.recipe_id!r}, "
            f"rating={self.rating!r})"
        )
