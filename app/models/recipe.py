"""SQLAlchemy ORM models for recipe management."""

from __future__ import annotations

from datetime import datetime, UTC
from typing import TYPE_CHECKING

from sqlalchemy import DateTime
from sqlalchemy import ForeignKey, String, Text, UniqueConstraint
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.db.base import Base

if TYPE_CHECKING:
    from app.models.inventory import FoodItem
    from app.models.user import User


class Recipe(Base):
    """Represents a row in the ``recipes`` table.

    Recipes can be created manually by users or generated by AI services.
    The AI relationship is managed through the AIModelOutput model separately.
    """

    __tablename__ = "recipes"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    title: Mapped[str] = mapped_column(String(255), nullable=False)
    is_ai_generated: Mapped[bool] = mapped_column(nullable=False, default=False)
    created_by_user_id: Mapped[int | None] = mapped_column(
        ForeignKey("users.id", ondelete="SET NULL")
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    created_by_user: Mapped[User | None] = relationship("User")

    ingredients: Mapped[list[RecipeIngredient]] = relationship(
        "RecipeIngredient", back_populates="recipe", cascade="all, delete-orphan"
    )

    steps: Mapped[list[RecipeStep]] = relationship(
        "RecipeStep", back_populates="recipe", cascade="all, delete-orphan"
    )

    nutrition: Mapped[RecipeNutrition | None] = relationship(
        "RecipeNutrition", back_populates="recipe", cascade="all, delete-orphan"
    )

    reviews: Mapped[list[RecipeReview]] = relationship(
        "RecipeReview", back_populates="recipe", cascade="all, delete-orphan"
    )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"Recipe(id={self.id!r}, title={self.title!r}, "
            f"is_ai_generated={self.is_ai_generated!r})"
        )


class RecipeIngredient(Base):
    """Represents a row in the ``recipe_ingredients`` table.

    Links recipes to food items with specific amounts and units.
    Uses a composite primary key of recipe_id and food_item_id.
    """

    __tablename__ = "recipe_ingredients"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id", ondelete="CASCADE"), primary_key=True
    )
    food_item_id: Mapped[int] = mapped_column(
        ForeignKey("food_items.id", ondelete="CASCADE"), primary_key=True
    )
    amount: Mapped[float] = mapped_column(nullable=False)
    unit: Mapped[str] = mapped_column(String(20), nullable=False)

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    recipe: Mapped[Recipe] = relationship("Recipe", back_populates="ingredients")
    food_item: Mapped[FoodItem] = relationship("FoodItem")

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeIngredient(recipe_id={self.recipe_id!r}, "
            f"food_item_id={self.food_item_id!r}, amount={self.amount!r})"
        )


class RecipeStep(Base):
    """Represents a row in the ``recipe_steps`` table.

    Contains ordered cooking instructions for a recipe.
    """

    __tablename__ = "recipe_steps"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    id: Mapped[int] = mapped_column(primary_key=True, index=True)
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id", ondelete="CASCADE"), nullable=False
    )
    step_number: Mapped[int] = mapped_column(nullable=False)
    instruction: Mapped[str] = mapped_column(Text, nullable=False)

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    recipe: Mapped[Recipe] = relationship("Recipe", back_populates="steps")

    # ------------------------------------------------------------------ #
    # Constraints                                                         #
    # ------------------------------------------------------------------ #
    __table_args__ = (
        UniqueConstraint("recipe_id", "step_number", name="uq_recipe_step_number"),
    )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeStep(id={self.id!r}, recipe_id={self.recipe_id!r}, "
            f"step_number={self.step_number!r})"
        )


class RecipeNutrition(Base):
    """Represents a row in the ``recipe_nutrition`` table.

    Optional nutritional information for recipes. Can be calculated,
    user-provided, or sourced from external databases like OpenFoodFacts.
    """

    __tablename__ = "recipe_nutrition"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id", ondelete="CASCADE"), primary_key=True
    )
    kcal: Mapped[float | None] = mapped_column(default=None)
    protein_g: Mapped[float | None] = mapped_column(default=None)
    fat_g: Mapped[float | None] = mapped_column(default=None)
    carbs_g: Mapped[float | None] = mapped_column(default=None)
    fiber_g: Mapped[float | None] = mapped_column(default=None)
    source: Mapped[str] = mapped_column(
        String(50), nullable=False, default="calculated"
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    recipe: Mapped[Recipe] = relationship("Recipe", back_populates="nutrition")

    # ------------------------------------------------------------------ #
    # Properties                                                          #
    # ------------------------------------------------------------------ #
    @property
    def has_complete_macros(self) -> bool:
        """Check if all major macronutrients are present.

        Returns:
            True if protein, fat, and carbs are all present.
        """
        return all([
            self.protein_g is not None,
            self.fat_g is not None,
            self.carbs_g is not None
        ])

    @property
    def calculated_kcal(self) -> float | None:
        """Calculate calories from macronutrients if available.

        Uses standard conversion: 4 kcal/g protein, 9 kcal/g fat, 4 kcal/g carbs.

        Returns:
            Calculated calories or None if macros are incomplete.
        """
        if not self.has_complete_macros:
            return None

        return (
                (self.protein_g * 4) +
                (self.fat_g * 9) +
                (self.carbs_g * 4)
        )

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeNutrition(recipe_id={self.recipe_id!r}, "
            f"kcal={self.kcal!r}, source={self.source!r})"
        )


class RecipeReview(Base):
    """Represents a row in the ``recipe_reviews`` table.
    
    Users can rate and review recipes with a 1-5 star system.
    Each user can only review each recipe once (composite primary key).
    """

    __tablename__ = "recipe_reviews"

    # ------------------------------------------------------------------ #
    # Columns                                                             #
    # ------------------------------------------------------------------ #
    user_id: Mapped[int] = mapped_column(
        ForeignKey("users.id", ondelete="CASCADE"), primary_key=True
    )
    recipe_id: Mapped[int] = mapped_column(
        ForeignKey("recipes.id", ondelete="CASCADE"), primary_key=True
    )
    rating: Mapped[int] = mapped_column(nullable=False)
    comment: Mapped[str | None] = mapped_column(Text, default=None)
    created_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=lambda: datetime.now(UTC)
    )

    # ------------------------------------------------------------------ #
    # Relationships                                                       #
    # ------------------------------------------------------------------ #
    user: Mapped[User] = relationship("User")
    recipe: Mapped[Recipe] = relationship("Recipe")

    # ------------------------------------------------------------------ #
    # Dunder                                                               #
    # ------------------------------------------------------------------ #
    def __repr__(self) -> str:  # noqa: D401 – we want a short repr
        return (
            f"RecipeReview(user_id={self.user_id!r}, recipe_id={self.recipe_id!r}, "
            f"rating={self.rating!r})"
        )
